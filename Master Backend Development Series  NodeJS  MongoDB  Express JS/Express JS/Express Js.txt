Express.js Framework  ✅

Introduction to Express.js  ✅
express js is a npm package manager  ✅
Framework  ✅
manages everything from receiving the request to the server and sending the response  ✅


Setting up a basic Express JS application  ✅
Routing  ✅

Middleware:  ✅
What is the middleware ?
Middleware in MERN is essential for handling common tasks like authentication, logging, 
error handling, and data parsing before the actual business logic of a request is processed. 
It helps to keep your backend code modular, clean, and efficient.

Middleware can perform the following tasks:
- Authentication
- Authorization
- Logging
- Caching
- Compression
- Validation
- Error handling
- and many more

Flow of Middleware in MERN:
When a request is made, it enters the middleware stack.
Each middleware function has the ability to modify the request (req) or 
response (res) objects, perform operations like validation, logging, or 
authorization, and then pass the request to the next middleware function using next().
If the middleware decides that the request should not proceed, it can end the cycle by sending a response 
(e.g., sending a 403 Unauthorized error).
The request eventually reaches the route handler, where the actual business logic happens.
After the route handler processes the request, the response is sent back, 
possibly passing through additional middleware (e.g., for logging or error handling) before reaching the client.

In MERN, Middleware Can Be Used:
In the Express.js server (Backend) to handle request preprocessing.
In the React frontend (if using a framework like Redux or React Router, for example) 
for tasks like routing or API request handling.

Request and response handling  (frontend --> backend --> frontend)  ✅
frontend (1st we write URL in browser) --> backend (server) --> frontend (response is sent back to browser)  ✅

Error handling 